// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String @unique
  refresh_token_expires_in Int?
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model Box {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  totalPrice Int
  boxSize    Int
  items      Product[]
  Order      Order?    @relation(fields: [orderId], references: [id])
  orderId    String?

  @@index([orderId])
}

model BoxTemplate {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  src       String
  boxSize   Int
  products  ProductClass[]
}
model Order {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  totalPrice Int
  boxes     Box[]
  user      User      @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}
// indivdual object
model Product {
  id String @id @default(cuid())
  // size of package ( quantity *  productClass price = price of product)
  quantity       Int
  // cut of meat 
  productClass   ProductClass @relation(fields: [productClassId], references: [id])
  productClassId String
  // is this in a box
  Box            Box?         @relation(fields: [boxId], references: [id])
  boxId          String?

  @@index([productClassId])
  @@index([boxId])
}

model ProductClass {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  src       String
  products  Product[]
  BoxTemplates BoxTemplate[] @relation()
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
