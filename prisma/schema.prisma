generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Example {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String  @unique
  refresh_token_expires_in Int?
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Box {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  totalPrice Int
  boxSize    Int
  items      Product[]
  Order      Order?    @relation(fields: [orderId], references: [id])
  orderId    String?   @db.ObjectId

  @@index([orderId])
}

model BoxTemplate {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  name            String
  src             String
  boxSize         Int
  products        ProductClass[] @relation(fields: [productClassIds], references: [id])
  productClassIds String[]       @db.ObjectId
}

model Order {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  totalPrice Int
  boxes      Box[]

  paid Boolean @default(false)
}

model Product {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  quantity       Int
  productClass   ProductClass @relation(fields: [productClassId], references: [id])
  productClassId String       @db.ObjectId
  Box            Box?         @relation(fields: [boxId], references: [id])
  boxId          String?      @db.ObjectId

  @@index([productClassId])
  @@index([boxId])
}

model ProductClass {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  name           String
  src            String?
  products       Product[]
  BoxTemplates   BoxTemplate[] @relation(fields: [boxTemplateIds], references: [id])
  boxTemplateIds String[]      @db.ObjectId
}

model VerificationToken {
  identifier String  @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
